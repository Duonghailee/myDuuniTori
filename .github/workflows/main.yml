name: Release DuuniWebapp with Docker # Name of the workflow

# On a push to the branch named master
on:
  push:
    branches: 
      - master

# Job called build runs-on ubuntu-latest
jobs:
  Explore-GitHub-Actions:
    runs-on: ubuntu-latest
    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v2
      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."
      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}
      - run: echo "üçè This job's status is ${{ job.status }}."
  build: 
    runs-on: ubuntu-latest
    steps:
    # Checkout to the repository (the actions don't actually need this since they use the repository context anyway)
    - uses: actions/checkout@v2
    - uses: akhileshns/heroku-deploy@v3.12.12 # This is the action
      with:
        heroku_api_key: ${{secrets.HEROKU_API_KEY}}
        heroku_app_name: "duuni_dockerized" #Must be unique in Heroku
        heroku_email: "duonghailee@gmail.com"
        usedocker: true
        docker_build_args: |
          API_DUUNI
      env:
        NODE_ENV: production
        API_DUUNI: ${{ secrets.API_DUUNI }}

    # # We need to login so we can later push the image without issues. 
    # - name: Login to DockerHub
    #   uses: docker/login-action@v1 
    #   with: 
    #     username: ${{ secrets.DOCKERHUB_USERNAME }}
    #     password: ${{ secrets.DOCKERHUB_TOKEN }}
            
    # # Builds my duunitori webapp
    # - name: Build and push
    #   uses: docker/build-push-action@v2
    #   with:
    #     push: true
    #     tags: duuni_devop:latest